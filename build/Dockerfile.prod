# 多階段建置 - 生產優化 Dockerfile
# Stage 1: 建置階段
FROM golang:1.23-alpine AS builder

# 安裝必要的工具
RUN apk add --no-cache git ca-certificates tzdata curl

# 設定工作目錄
WORKDIR /build

# 先複製依賴檔案以利用 Docker 層快取
COPY go.mod go.sum ./
RUN go mod download

# 複製源代碼
COPY . .

# 執行測試（生產建置前的品質檢查）
RUN go test -short ./tests/unit/... || echo "Warning: Some unit tests failed"

# 建置應用程式 - 生產優化
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
  -ldflags="-w -s -X main.version=$(git describe --tags --always --dirty)" \
  -a -installsuffix cgo \
  -o app .

# Stage 2: 運行階段 - 最小化容器
FROM alpine:3.19

# 安裝運行時依賴
RUN apk --no-cache add \
  ca-certificates \
  tzdata \
  curl \
  && rm -rf /var/cache/apk/*

# 建立非特權使用者
RUN addgroup -g 1001 -S appgroup && \
  adduser -u 1001 -S appuser -G appgroup

# 設定工作目錄
WORKDIR /app

# 複製建置好的二進位檔案
COPY --from=builder /build/app .

# 複製配置檔案
COPY --from=builder /build/config ./config
COPY --from=builder /build/static ./static

# 建立所需目錄並設定權限
RUN mkdir -p /app/logs /app/uploads && \
  chown -R appuser:appgroup /app

# 設定時區
ENV TZ=Asia/Taipei

# 暴露端口
EXPOSE 8080

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# 切換到非特權使用者
USER appuser

# 設定啟動命令
CMD ["./app"]